package com.xoado.tools.service.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.Base64;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.xoado.client.http.XoadoHttpRemote;
import com.xoado.common.XoadoResult;
import com.xoado.tools.service.IFileUpload;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

@Service
public class FileUpload implements IFileUpload{
	
	/*
	 * 营业执照
	 */
	@Value("${THEBUSINESSLICENSEURL}")
	private String THEBUSINESSLICENSEURL;
	/*
	 * 通用文字识别
	 */
	@Value("${TEXTURL}")
	private String TEXTURL;
	/*
	 * 身份证识别
	 */
	@Value("${IDCARD}")
	private String IDCARD;
	/*
	 * 人脸识别
	 */
	@Value("${FACERECOGNITION}")
	private String FACERECOGNITION;
	/*
	 * 银行卡识别
	 */
	@Value("${BANKCARD}")
	private String BANKCARD;
	/*
	 * 阿里code
	 */
	@Value("${APPCODE}")
	private String APPCODE;
	/*
	 * 存储路径
	 */
	@Value("${XOADO_SCANNING}")
	private String XOADO_SCANNING;
	
	@Override
	public XoadoResult image_recognition(CommonsMultipartFile file, String base64Body,String type,HttpServletRequest request) {
		
		/**
		 * 1:使用通用文字识别TEXTURL，如果识别出来有营业执照进行营业执照识别THEBUSINESSLICENSEURL
		 */
//		生成map
		Map<String, String> headers = new HashMap<String, String>();
		headers.put("Authorization", "APPCODE " + APPCODE);
		headers.put("Content-Type", "application/json; charset=UTF-8");
		if(base64Body==null){
	try {
				
		        InputStream in = null;
		        String imagepath = XOADO_SCANNING+new Date().getTime()+file.getOriginalFilename();
		        File file2 = new File(XOADO_SCANNING);
		        if(!file2.exists()){
					 file2.mkdirs();
					}
		        try {
		        	 File newpositiveImgUrlname = new File(imagepath);
		        	 file.transferTo(newpositiveImgUrlname);
		        	 in = new FileInputStream(newpositiveImgUrlname);
//		        	 进行base64编码
		        	 byte[] bytes=new byte[(int)newpositiveImgUrlname.length()]; in.read(bytes);
		        	 base64Body = Base64.getEncoder().encodeToString(bytes); 
		        	
				} catch (Exception e) {
					e.printStackTrace();
				}finally {
					if (in != null) {
						try {
							 in.close();
						} catch (Exception e) {
							 e.printStackTrace();
						}
					}
				}
			} catch (Exception e) {
				
			}
		}
		JSONObject json = new JSONObject();
        json.put("image", base64Body);
        String imaText = json.toString();
        String result = XoadoHttpRemote.xoadoDopost(TEXTURL, imaText, headers);
        
        JSONObject jsonObject =JSONObject.fromObject(result);
        System.out.println("jsonObject:"+jsonObject);
        HashMap<Object,Object> map = new HashMap<>();
        JSONArray jsonArray = jsonObject.getJSONArray("ret");
        if(jsonArray!=null){
        	for (int i = 0; i < jsonArray.size(); i++) {
        		String word = jsonArray.getJSONObject(i).getString("word");
        		for (int j = 1; j < jsonArray.size()-1; j++) {
					map.put(word, word);
				}
    		}
        }	
		
		return null;
		
	}

}
